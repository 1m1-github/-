{
  "address": "0x19604C37bc3C06ff64c5eFBAcB3155efB34aA02e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "claimWin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "arr",
          "type": "uint256[4]"
        }
      ],
      "name": "countUnique",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "generatePermutation",
      "outputs": [
        {
          "internalType": "uint256[7][7]",
          "name": "board",
          "type": "uint256[7][7]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetCard",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "guessCoordinates",
          "type": "uint256[2]"
        }
      ],
      "name": "guess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxNumCorrectPerBoard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCorrectPerBoardPerPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "viewNumCorrectPerBoardPerPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winnerPerBoard",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4571a8b9fdd3a66e57f6b3fed5cdff28e6628c9f8dcc114a7c1d62680cab94c",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x8EEd3eC93C283B298FA05972AC7cdec551b4DFFE",
    "contractAddress": "0x19604C37bc3C06ff64c5eFBAcB3155efB34aA02e",
    "transactionIndex": 0,
    "gasUsed": "1262895",
    "logsBloom": "0x
    "blockHash": "0x0e47d809effbea817e5b441b89052ed2fa1034d1cda00fa4e4d39aa3e44646c4",
    "transactionHash": "0xf4571a8b9fdd3a66e57f6b3fed5cdff28e6628c9f8dcc114a7c1d62680cab94c",
    "logs": [],
    "blockNumber": 2213917,
    "cumulativeGasUsed": "1262895",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "f37da77760a766bc28920325b1cd4d3b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"claimWin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"arr\",\"type\":\"uint256[4]\"}],\"name\":\"countUnique\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"generatePermutation\",\"outputs\":[{\"internalType\":\"uint256[7][7]\",\"name\":\"board\",\"type\":\"uint256[7][7]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetCard\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"guessCoordinates\",\"type\":\"uint256[2]\"}],\"name\":\"guess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxNumCorrectPerBoard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCorrectPerBoardPerPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewNumCorrectPerBoardPerPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerPerBoard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/QuestionMarkGame.sol\":\"QuestionMarkGame\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/QuestionMarkGame.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\n// import \\\"hardhat/console.sol\\\";\\n\\nuint constant WIN_THRESHOLD = 10;\\nuint constant NUM_CARDS = 4 ** 4;\\nuint constant BOARD_WIDTH = 7;\\nuint constant COLUMN = 0;\\nuint constant ROW = 1;\\nuint constant BOTTOM_LEFT = 0;\\nuint constant BOTTOM_RIGHT = 1;\\nuint constant TOP_LEFT = 2;\\nuint constant TOP_RIGHT = 3;\\naddress constant ZERO_ADDRESS = address(0);\\n\\ncontract QuestionMarkGame {\\n\\n    mapping(uint => uint) public maxNumCorrectPerBoard;\\n    mapping(uint => address) public winnerPerBoard;\\n    mapping(uint => mapping(uint => mapping(address => bool))) guessedPerBoardPerTargetCardPerPlayer;\\n    mapping(uint => mapping(address => uint)) public numCorrectPerBoardPerPlayer;\\n    \\n    function viewNumCorrectPerBoardPerPlayer(uint seed, address user) public view returns (uint) {\\n        return numCorrectPerBoardPerPlayer[seed][user];\\n    }\\n\\n    function check(uint targetCard, uint[2] memory guessCoordinates) private pure {\\n        require(targetCard < NUM_CARDS);\\n        require(0 < guessCoordinates[COLUMN]);\\n        require(guessCoordinates[COLUMN] < 2*BOARD_WIDTH);\\n        require(0 < guessCoordinates[ROW]);\\n        require(guessCoordinates[ROW] < 2*BOARD_WIDTH);\\n    }\\n\\n    function claimWin(uint seed) public returns (bool) {\\n        if (winnerPerBoard[seed] != ZERO_ADDRESS) return false;\\n        if (numCorrectPerBoardPerPlayer[seed][msg.sender] < WIN_THRESHOLD) return false;\\n        winnerPerBoard[seed] = msg.sender;\\n        return true;\\n    }\\n\\n    function guess(uint seed, uint targetCard, uint[2] memory guessCoordinates) public returns (bool) {\\n        check(targetCard, guessCoordinates);\\n\\n        if (guessedPerBoardPerTargetCardPerPlayer[seed][targetCard][msg.sender]) return false;\\n        guessedPerBoardPerTargetCardPerPlayer[seed][targetCard][msg.sender] = true;\\n        uint256[BOARD_WIDTH][BOARD_WIDTH] memory board = generatePermutation(seed);\\n        if (isGuessCorrect(board, targetCard, guessCoordinates)) {\\n            uint256[4] memory targetCardValues = numberToCard(targetCard);\\n            numCorrectPerBoardPerPlayer[seed][msg.sender] += countUnique(targetCardValues);\\n            if (maxNumCorrectPerBoard[seed] < numCorrectPerBoardPerPlayer[seed][msg.sender]) maxNumCorrectPerBoard[seed] = numCorrectPerBoardPerPlayer[seed][msg.sender];\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function countUnique(uint[4] memory arr) public pure returns (uint) {\\n        bool[4] memory seen;\\n        uint uniqueCount = 0;\\n\\n        for (uint i = 0; i < 4; i++) {\\n            if (!seen[arr[i]]) {\\n                seen[arr[i]] = true;\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    function rotateCard(uint card) private pure returns (uint rotatedCard) {\\n        // clockwise\\n        uint[4] memory cardValues = numberToCard(card);\\n        uint[4] memory rotatedCardValues;\\n        rotatedCardValues[BOTTOM_LEFT] = cardValues[BOTTOM_RIGHT];\\n        rotatedCardValues[BOTTOM_RIGHT] = cardValues[TOP_RIGHT];\\n        rotatedCardValues[TOP_RIGHT] = cardValues[TOP_LEFT];\\n        rotatedCardValues[TOP_LEFT] = cardValues[BOTTOM_LEFT];\\n        rotatedCard = cardToNumber(rotatedCardValues);\\n    }\\n\\n    function isGuessCorrect(uint[BOARD_WIDTH][BOARD_WIDTH] memory board, uint targetCard, uint[2] memory guessCoordinates) private pure returns (bool) {\\n        check(targetCard, guessCoordinates);\\n\\n        uint256[4] memory targetCardValues = numberToCard(targetCard);\\n\\n        if (guessCoordinates[COLUMN] % 2 == 1 && guessCoordinates[ROW] % 2 == 1) {\\n            // exact card\\n            uint boardCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2];\\n            if (targetCard == boardCard) return true;\\n            targetCard = rotateCard(targetCard);\\n            if (targetCard == boardCard) return true;\\n            targetCard = rotateCard(targetCard);\\n            if (targetCard == boardCard) return true;\\n            targetCard = rotateCard(targetCard);\\n            if (targetCard == boardCard) return true;\\n            return false;\\n        } else if (guessCoordinates[COLUMN] % 2 == 0 && guessCoordinates[ROW] % 2 == 0) {\\n            // 4 cards\\n            uint bottomLeftCard = board[guessCoordinates[ROW] / 2 - 1][guessCoordinates[COLUMN] / 2 - 1];\\n            uint256[4] memory bottomLeftCardValues = numberToCard(bottomLeftCard);\\n            uint bottomRightCard = board[guessCoordinates[ROW] / 2-1][guessCoordinates[COLUMN] / 2];\\n            uint256[4] memory bottomRightCardValues = numberToCard(bottomRightCard);\\n            uint topLeftCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2-1];\\n            uint256[4] memory topLeftCardValues = numberToCard(topLeftCard);\\n            uint topRightCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2];\\n            uint256[4] memory topRightCardValues = numberToCard(topRightCard);\\n            if (bottomLeftCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_LEFT] && bottomRightCardValues[TOP_LEFT] == targetCardValues[BOTTOM_RIGHT] && topLeftCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_LEFT] && topRightCardValues[BOTTOM_LEFT] == targetCardValues[TOP_RIGHT]) return true;\\n            targetCard = rotateCard(targetCard);\\n            targetCardValues = numberToCard(targetCard);\\n            if (bottomLeftCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_LEFT] && bottomRightCardValues[TOP_LEFT] == targetCardValues[BOTTOM_RIGHT] && topLeftCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_LEFT] && topRightCardValues[BOTTOM_LEFT] == targetCardValues[TOP_RIGHT]) return true;\\n            targetCard = rotateCard(targetCard);\\n            targetCardValues = numberToCard(targetCard);\\n            if (bottomLeftCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_LEFT] && bottomRightCardValues[TOP_LEFT] == targetCardValues[BOTTOM_RIGHT] && topLeftCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_LEFT] && topRightCardValues[BOTTOM_LEFT] == targetCardValues[TOP_RIGHT]) return true;\\n            targetCard = rotateCard(targetCard);\\n            targetCardValues = numberToCard(targetCard);\\n            if (bottomLeftCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_LEFT] && bottomRightCardValues[TOP_LEFT] == targetCardValues[BOTTOM_RIGHT] && topLeftCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_LEFT] && topRightCardValues[BOTTOM_LEFT] == targetCardValues[TOP_RIGHT]) return true;\\n            return false;\\n        } else if (guessCoordinates[COLUMN] % 2 == 1 && guessCoordinates[ROW] % 2 == 0) {\\n            // 2 cards\\n            uint bottomCard = board[guessCoordinates[ROW] / 2-1][guessCoordinates[COLUMN] / 2];\\n            uint256[4] memory bottomCardValues = numberToCard(bottomCard);\\n            uint topCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2];\\n            uint256[4] memory topCardValues = numberToCard(topCard);\\n            if (bottomCardValues[TOP_LEFT] == targetCardValues[BOTTOM_LEFT] && bottomCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_RIGHT] && topCardValues[BOTTOM_LEFT] == targetCardValues[TOP_LEFT] && topCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_RIGHT]) return true;\\n            targetCard = rotateCard(targetCard);\\n            targetCardValues = numberToCard(targetCard);\\n            if (bottomCardValues[TOP_LEFT] == targetCardValues[BOTTOM_LEFT] && bottomCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_RIGHT] && topCardValues[BOTTOM_LEFT] == targetCardValues[TOP_LEFT] && topCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_RIGHT]) return true;\\n            targetCard = rotateCard(targetCard);\\n            targetCardValues = numberToCard(targetCard);\\n            if (bottomCardValues[TOP_LEFT] == targetCardValues[BOTTOM_LEFT] && bottomCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_RIGHT] && topCardValues[BOTTOM_LEFT] == targetCardValues[TOP_LEFT] && topCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_RIGHT]) return true;\\n            targetCard = rotateCard(targetCard);\\n            targetCardValues = numberToCard(targetCard);\\n            if (bottomCardValues[TOP_LEFT] == targetCardValues[BOTTOM_LEFT] && bottomCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_RIGHT] && topCardValues[BOTTOM_LEFT] == targetCardValues[TOP_LEFT] && topCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_RIGHT]) return true;\\n            return false;\\n        } else {\\n            // 2 cards\\n            uint leftCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2-1];\\n            uint256[4] memory leftCardValues = numberToCard(leftCard);\\n            uint rightCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2];\\n            uint256[4] memory rightCardValues = numberToCard(rightCard);\\n            if (leftCardValues[BOTTOM_RIGHT] == targetCardValues[BOTTOM_LEFT] && rightCardValues[BOTTOM_LEFT] == targetCardValues[BOTTOM_RIGHT] && leftCardValues[TOP_RIGHT] == targetCardValues[TOP_LEFT] && rightCardValues[TOP_LEFT] == targetCardValues[TOP_RIGHT]) return true;\\n            targetCard = rotateCard(targetCard);\\n            targetCardValues = numberToCard(targetCard);\\n            if (leftCardValues[BOTTOM_RIGHT] == targetCardValues[BOTTOM_LEFT] && rightCardValues[BOTTOM_LEFT] == targetCardValues[BOTTOM_RIGHT] && leftCardValues[TOP_RIGHT] == targetCardValues[TOP_LEFT] && rightCardValues[TOP_LEFT] == targetCardValues[TOP_RIGHT]) return true;\\n            targetCard = rotateCard(targetCard);\\n            targetCardValues = numberToCard(targetCard);\\n            if (leftCardValues[BOTTOM_RIGHT] == targetCardValues[BOTTOM_LEFT] && rightCardValues[BOTTOM_LEFT] == targetCardValues[BOTTOM_RIGHT] && leftCardValues[TOP_RIGHT] == targetCardValues[TOP_LEFT] && rightCardValues[TOP_LEFT] == targetCardValues[TOP_RIGHT]) return true;\\n            targetCard = rotateCard(targetCard);\\n            targetCardValues = numberToCard(targetCard);\\n            if (leftCardValues[BOTTOM_RIGHT] == targetCardValues[BOTTOM_LEFT] && rightCardValues[BOTTOM_LEFT] == targetCardValues[BOTTOM_RIGHT] && leftCardValues[TOP_RIGHT] == targetCardValues[TOP_LEFT] && rightCardValues[TOP_LEFT] == targetCardValues[TOP_RIGHT]) return true;\\n            return false;\\n        }\\n    }\\n\\n    // Maps the 4 values of the card to a single number (0 to 255)\\n    function cardToNumber(uint256[4] memory cardValues) private pure returns (uint256) {\\n        require(cardValues.length == 4, \\\"Card must have exactly 4 values.\\\");\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < 4; i++) {\\n            require(cardValues[i] < 4, \\\"Each value must be between 0 and 3.\\\");\\n            result += cardValues[i] * uint256(4**i);\\n        }\\n        return result;\\n    }\\n\\n    // Maps a number (0 to 255) back to the 4 values of the card\\n    function numberToCard(uint256 number) private pure returns (uint256[4] memory) {\\n        require(number < 256, \\\"Number must be between 0 and 255.\\\");\\n        uint256[4] memory cardValues;\\n        for (uint256 i = 0; i < 4; i++) {\\n            cardValues[i] = number % 4;\\n            number /= 4;\\n            // 40 -> 0, 10 -> 2, 2->2, 0->0\\n        }\\n        return cardValues;\\n    }\\n    \\n    function generatePermutation(uint256 seed) public pure returns (uint256[BOARD_WIDTH][BOARD_WIDTH] memory board) {\\n        uint256[NUM_CARDS] memory permutation;\\n        for (uint256 i = 0; i < NUM_CARDS; i++) {\\n            permutation[i] = i;\\n        }\\n        for (uint256 i = NUM_CARDS - 1; i > 0; i--) {\\n            uint256 j = random(seed, i + 1);\\n            (permutation[i], permutation[j]) = (permutation[j], permutation[i]);\\n            seed = uint256(keccak256(abi.encodePacked(seed, i)));\\n        }\\n        for (uint256 i = 0; i < BOARD_WIDTH; i++) {\\n            for (uint256 j = 0; j < BOARD_WIDTH; j++) {\\n                board[i][j] = permutation[i*BOARD_WIDTH + j];\\n            }\\n        }\\n    }\\n\\n    function random(uint256 seed, uint256 upperBound) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(seed))) % upperBound;\\n    }\\n}\\n\",\"keccak256\":\"0x4cac33a6258f84b546f5c0791ede88a74c205729c18a45b99099cf58552a7d15\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40,
        "contract": "contracts/QuestionMarkGame.sol:QuestionMarkGame",
        "label": "maxNumCorrectPerBoard",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 44,
        "contract": "contracts/QuestionMarkGame.sol:QuestionMarkGame",
        "label": "winnerPerBoard",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 52,
        "contract": "contracts/QuestionMarkGame.sol:QuestionMarkGame",
        "label": "guessedPerBoardPerTargetCardPerPlayer",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 58,
        "contract": "contracts/QuestionMarkGame.sol:QuestionMarkGame",
        "label": "numCorrectPerBoardPerPlayer",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}