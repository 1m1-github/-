{
  "address": "0x1266931A43d8784388D75affBcF9EB4328E02607",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "claimWin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "generatePermutation",
      "outputs": [
        {
          "internalType": "uint256[7][7]",
          "name": "board",
          "type": "uint256[7][7]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetCard",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "guessCoordinates",
          "type": "uint256[2]"
        }
      ],
      "name": "guess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCorrectPerBoardPerPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "viewNumCorrectPerBoardPerPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winnerPerBoard",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6bcc986f14e11fa6c4e28c809d0c61ef947ad376ad100e6c710e2efc56c34edb",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x8EEd3eC93C283B298FA05972AC7cdec551b4DFFE",
    "contractAddress": "0x1266931A43d8784388D75affBcF9EB4328E02607",
    "transactionIndex": 0,
    "gasUsed": "1638130",
    "logsBloom": "0x
    "blockHash": "0xa636272dcb61ac047c80d2955604a6c14cd56e02a65768a7e9f0a65127554cab",
    "transactionHash": "0x6bcc986f14e11fa6c4e28c809d0c61ef947ad376ad100e6c710e2efc56c34edb",
    "logs": [],
    "blockNumber": 2211190,
    "cumulativeGasUsed": "1638130",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "90643c922ed4e153cd35b8d74c4d1c97",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"claimWin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"generatePermutation\",\"outputs\":[{\"internalType\":\"uint256[7][7]\",\"name\":\"board\",\"type\":\"uint256[7][7]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetCard\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"guessCoordinates\",\"type\":\"uint256[2]\"}],\"name\":\"guess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCorrectPerBoardPerPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"viewNumCorrectPerBoardPerPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerPerBoard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/QuestionMarkGame.sol\":\"QuestionMarkGame\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/QuestionMarkGame.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\nimport \\\"hardhat/console.sol\\\";\\n\\nuint constant WIN_THRESHOLD = 10;\\nuint constant NUM_CARDS = 4 ** 4;\\nuint constant BOARD_WIDTH = 7;\\nuint constant COLUMN = 0;\\nuint constant ROW = 1;\\nuint constant BOTTOM_LEFT = 0;\\nuint constant BOTTOM_RIGHT = 1;\\nuint constant TOP_LEFT = 2;\\nuint constant TOP_RIGHT = 3;\\naddress constant ZERO_ADDRESS = address(0);\\n\\ncontract QuestionMarkGame {\\n\\n    mapping(uint => address) public winnerPerBoard;\\n    mapping(uint => mapping(uint => mapping(address => bool))) guessedPerBoardPerTargetCardPerPlayer;\\n    mapping(uint => mapping(address => uint)) public numCorrectPerBoardPerPlayer;\\n    \\n    function viewNumCorrectPerBoardPerPlayer(uint seed) public view returns (uint) {\\n        console.log('viewNumCorrectPerBoardPerPlayer, seed', seed);\\n        console.log('viewNumCorrectPerBoardPerPlayer, msg.sender', msg.sender);\\n        console.log('viewNumCorrectPerBoardPerPlayer, numCorrectPerBoardPerPlayer[seed][msg.sender]', numCorrectPerBoardPerPlayer[seed][msg.sender]);\\n        return numCorrectPerBoardPerPlayer[seed][msg.sender];\\n    }\\n\\n    function check(uint targetCard, uint[2] memory guessCoordinates) private pure {\\n        require(targetCard < NUM_CARDS);\\n        require(0 < guessCoordinates[COLUMN]);\\n        require(guessCoordinates[COLUMN] < 2*BOARD_WIDTH);\\n        require(0 < guessCoordinates[ROW]);\\n        require(guessCoordinates[ROW] < 2*BOARD_WIDTH);\\n    }\\n\\n    function claimWin(uint seed) public {\\n        if (winnerPerBoard[seed] == ZERO_ADDRESS) return;\\n        if (numCorrectPerBoardPerPlayer[seed][msg.sender] < WIN_THRESHOLD) return;\\n        winnerPerBoard[seed] = msg.sender;\\n    }\\n\\n    function guess(uint seed, uint targetCard, uint[2] memory guessCoordinates) public {\\n        console.log('guess, seed', seed);\\n        console.log('guess, targetCard', targetCard);\\n        console.log('guess, guessCoordinates[0]', guessCoordinates[0]);\\n        console.log('guess, guessCoordinates[1]', guessCoordinates[1]);\\n        console.log('guess, numCorrectPerBoardPerPlayer[seed][msg.sender]', numCorrectPerBoardPerPlayer[seed][msg.sender]);\\n        \\n        check(targetCard, guessCoordinates);\\nconsole.log('guess, after check');\\n        if (guessedPerBoardPerTargetCardPerPlayer[seed][targetCard][msg.sender]) return;\\n        console.log('guess, not guessed yet');\\n        guessedPerBoardPerTargetCardPerPlayer[seed][targetCard][msg.sender] = true;\\n        uint256[BOARD_WIDTH][BOARD_WIDTH] memory board = generatePermutation(seed);\\n        if (isGuessCorrect(board, targetCard, guessCoordinates)) {\\n            console.log('guess, correct');\\n            console.log('guess, numCorrectPerBoardPerPlayer[seed][msg.sender]', numCorrectPerBoardPerPlayer[seed][msg.sender]);\\n            numCorrectPerBoardPerPlayer[seed][msg.sender]++;\\n            console.log('guess, numCorrectPerBoardPerPlayer[seed][msg.sender]', numCorrectPerBoardPerPlayer[seed][msg.sender]);\\n        }\\n    }\\n\\n    function isGuessCorrect(uint[BOARD_WIDTH][BOARD_WIDTH] memory board, uint targetCard, uint[2] memory guessCoordinates) private pure returns (bool) {\\n        console.log('isGuessCorrect, targetCard', targetCard);\\n        console.log('isGuessCorrect, guessCoordinates[0]', guessCoordinates[0]);\\n        console.log('isGuessCorrect, guessCoordinates[1]', guessCoordinates[1]);\\n\\n        console.log('isGuessCorrect, 0,0 card', board[0][0]);\\n\\n        check(targetCard, guessCoordinates);\\nconsole.log('isGuessCorrect, after check');\\n        uint256[4] memory targetCardValues = numberToCard(targetCard);\\n        console.log('isGuessCorrect, targetCardValues[BOTTOM_LEFT]', targetCardValues[BOTTOM_LEFT]);\\n        console.log('isGuessCorrect, targetCardValues[BOTTOM_RIGHT]', targetCardValues[BOTTOM_RIGHT]);\\n        console.log('isGuessCorrect, targetCardValues[TOP_RIGHT]', targetCardValues[TOP_RIGHT]);\\n        console.log('isGuessCorrect, targetCardValues[TOP_LEFT]', targetCardValues[TOP_LEFT]);\\n\\n        console.log('isGuessCorrect, numberToCard(board[0][0])[BOTTOM_LEFT]', numberToCard(board[0][0])[BOTTOM_LEFT]);\\n        console.log('isGuessCorrect, numberToCard(board[0][0])[BOTTOM_RIGHT]', numberToCard(board[0][0])[BOTTOM_RIGHT]);\\n        console.log('isGuessCorrect, numberToCard(board[0][0])[TOP_RIGHT]', numberToCard(board[0][0])[TOP_RIGHT]);\\n        console.log('isGuessCorrect, numberToCard(board[0][0])[TOP_LEFT]', numberToCard(board[0][0])[TOP_LEFT]);\\n\\n        if (guessCoordinates[COLUMN] % 2 == 1 && guessCoordinates[ROW] % 2 == 1) {\\n            console.log('isGuessCorrect, c1');\\n            // exact card\\n            // uint boardCard = board[guessCoordinates[COLUMN] / 2][guessCoordinates[ROW] / 2];\\n            uint boardCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2];\\n            return targetCard == boardCard;\\n        } else if (guessCoordinates[COLUMN] % 2 == 0 && guessCoordinates[ROW] % 2 == 0) {\\n            console.log('isGuessCorrect, c2');\\n            // 4 cards\\n            uint bottomLeftCard = board[guessCoordinates[ROW] / 2 - 1][guessCoordinates[COLUMN] / 2 - 1];\\n            // uint bottomLeftCard = board[guessCoordinates[COLUMN] / 2 - 1][guessCoordinates[ROW] / 2 - 1];\\n            uint256[4] memory bottomLeftCardValues = numberToCard(bottomLeftCard);\\n            uint bottomRightCard = board[guessCoordinates[ROW] / 2-1][guessCoordinates[COLUMN] / 2];\\n            // uint bottomRightCard = board[guessCoordinates[COLUMN] / 2][guessCoordinates[ROW] / 2 - 1];\\n            uint256[4] memory bottomRightCardValues = numberToCard(bottomRightCard);\\n            uint topLeftCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2-1];\\n            // uint topLeftCard = board[guessCoordinates[COLUMN] / 2 - 1][guessCoordinates[ROW] / 2];\\n            uint256[4] memory topLeftCardValues = numberToCard(topLeftCard);\\n            uint topRightCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2];\\n            // uint topRightCard = board[guessCoordinates[COLUMN] / 2][guessCoordinates[ROW] / 2];\\n            uint256[4] memory topRightCardValues = numberToCard(topRightCard);\\n            return bottomLeftCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_LEFT] && bottomRightCardValues[TOP_LEFT] == targetCardValues[BOTTOM_RIGHT] && topLeftCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_LEFT] && topRightCardValues[BOTTOM_LEFT] == targetCardValues[TOP_RIGHT];\\n        } else if (guessCoordinates[COLUMN] % 2 == 1 && guessCoordinates[ROW] % 2 == 0) {\\n            console.log('isGuessCorrect, c3');\\n            // 2 cards\\n            uint bottomCard = board[guessCoordinates[ROW] / 2-1][guessCoordinates[COLUMN] / 2];\\n            // uint bottomCard = board[guessCoordinates[COLUMN] / 2][guessCoordinates[ROW] / 2 - 1];\\n            console.log('isGuessCorrect, guessCoordinates[COLUMN] / 2', guessCoordinates[COLUMN] / 2);\\n            console.log('isGuessCorrect, guessCoordinates[ROW] / 2 - 1', guessCoordinates[ROW] / 2 - 1);\\n            console.log('isGuessCorrect, board[0][0]', board[0][0]);\\n            console.log('isGuessCorrect, board[1][1]', board[1][1]);\\n            console.log('isGuessCorrect, board[4][0]', board[4][0]);\\n            console.log('isGuessCorrect, board[4][1]', board[4][1]);\\n            console.log('isGuessCorrect, board[4][2]', board[4][2]);\\n            console.log('isGuessCorrect, board[4][3]', board[4][3]);\\n            console.log('isGuessCorrect, board[0][1]', board[0][1]);\\n            console.log('isGuessCorrect, board[0][2]', board[0][2]);\\n            console.log('isGuessCorrect, board[0][3]', board[0][3]);\\n            console.log('isGuessCorrect, board[0][4]', board[0][4]);\\n            uint256[4] memory bottomCardValues = numberToCard(bottomCard);\\n            uint topCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2];\\n            // uint topCard = board[guessCoordinates[COLUMN] / 2][guessCoordinates[ROW] / 2];\\n            uint256[4] memory topCardValues = numberToCard(topCard);\\n            console.log('isGuessCorrect, bottomCard', bottomCard);\\n            console.log('isGuessCorrect, topCard', topCard);\\n            console.log('isGuessCorrect, bottomCardValues[TOP_LEFT]', bottomCardValues[TOP_LEFT]);\\n            console.log('isGuessCorrect, bottomCardValues[TOP_RIGHT]', bottomCardValues[TOP_RIGHT]);\\n            console.log('isGuessCorrect, topCardValues[BOTTOM_LEFT]', topCardValues[BOTTOM_LEFT]);\\n            console.log('isGuessCorrect, topCardValues[BOTTOM_RIGHT]', topCardValues[BOTTOM_RIGHT]);\\n            return bottomCardValues[TOP_LEFT] == targetCardValues[BOTTOM_LEFT] && bottomCardValues[TOP_RIGHT] == targetCardValues[BOTTOM_RIGHT] && topCardValues[BOTTOM_LEFT] == targetCardValues[TOP_LEFT] && topCardValues[BOTTOM_RIGHT] == targetCardValues[TOP_RIGHT];\\n        } else {\\n            console.log('isGuessCorrect, c4');\\n            // 2 cards\\n            uint leftCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2-1];\\n            // uint leftCard = board[guessCoordinates[COLUMN] / 2 - 1][guessCoordinates[ROW] / 2];\\n            uint256[4] memory leftCardValues = numberToCard(leftCard);\\n            uint rightCard = board[guessCoordinates[ROW] / 2][guessCoordinates[COLUMN] / 2];\\n            // uint rightCard = board[guessCoordinates[COLUMN] / 2][guessCoordinates[ROW] / 2];\\n            uint256[4] memory rightCardValues = numberToCard(rightCard);\\n            return leftCardValues[BOTTOM_RIGHT] == targetCardValues[BOTTOM_LEFT] && rightCardValues[BOTTOM_LEFT] == targetCardValues[BOTTOM_RIGHT] && leftCardValues[TOP_RIGHT] == targetCardValues[TOP_LEFT] && rightCardValues[TOP_LEFT] == targetCardValues[TOP_RIGHT];\\n        }\\n    }\\n\\n    // Maps the 4 values of the card to a single number (0 to 255)\\n    function cardToNumber(uint256[4] memory cardValues) private pure returns (uint256) {\\n        require(cardValues.length == 4, \\\"Card must have exactly 4 values.\\\");\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < 4; i++) {\\n            require(cardValues[i] < 4, \\\"Each value must be between 0 and 3.\\\");\\n            result += cardValues[i] * uint256(4**i);\\n        }\\n        return result;\\n    }\\n\\n    // Maps a number (0 to 255) back to the 4 values of the card\\n    function numberToCard(uint256 number) private pure returns (uint256[4] memory) {\\n        require(number < 256, \\\"Number must be between 0 and 255.\\\");\\n        uint256[4] memory cardValues;\\n        for (uint256 i = 0; i < 4; i++) {\\n            cardValues[i] = number % 4;\\n            number /= 4;\\n            // 40 -> 0, 10 -> 2, 2->2, 0->0\\n        }\\n        return cardValues;\\n    }\\n    \\n    function generatePermutation(uint256 seed) public pure returns (uint256[BOARD_WIDTH][BOARD_WIDTH] memory board) {\\n        uint256[NUM_CARDS] memory permutation;\\n        for (uint256 i = 0; i < NUM_CARDS; i++) {\\n            permutation[i] = i;\\n        }\\n        for (uint256 i = NUM_CARDS - 1; i > 0; i--) {\\n            uint256 j = random(seed, i + 1);\\n            (permutation[i], permutation[j]) = (permutation[j], permutation[i]);\\n            seed = uint256(keccak256(abi.encodePacked(seed, i)));\\n        }\\n        for (uint256 i = 0; i < BOARD_WIDTH; i++) {\\n            for (uint256 j = 0; j < BOARD_WIDTH; j++) {\\n                board[i][j] = permutation[i*BOARD_WIDTH + j];\\n            }\\n        }\\n    }\\n\\n    function random(uint256 seed, uint256 upperBound) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(seed))) % upperBound;\\n    }\\n}\\n\",\"keccak256\":\"0xf95aa396712917e94e79e7056755cc8332fb6743c4156a50324f24a9c6868018\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50611cae8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063187604cc14610067578063713d9e8b146100a5578063a7e7c787146100e6578063b7507764146100fb578063bbffa7f31461010e578063ee0144ab1461012e575b600080fd5b610092610075366004611606565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6100ce6100b3366004611642565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161009c565b6100f96100f4366004611671565b610141565b005b610092610109366004611642565b610421565b61012161011c366004611642565b6104c0565b60405161009c9190611703565b6100f961013c366004611642565b61066d565b61016e6040518060400160405280600b81526020016a19dd595cdccb081cd9595960aa1b815250846106d1565b6101a16040518060400160405280601181526020017019dd595cdccb081d185c99d95d10d85c99607a1b815250836106d1565b60408051808201909152601a81527f67756573732c206775657373436f6f7264696e617465735b305d00000000000060208201526101e7908260005b60200201516106d1565b60408051808201909152601a81527f67756573732c206775657373436f6f7264696e617465735b315d0000000000006020820152610227908260016101dd565b610262604051806060016040528060348152602001611aa76034913960008581526002602090815260408083203384529091529020546106d1565b61026c828261071a565b61029f6040518060400160405280601281526020017167756573732c20616674657220636865636b60701b815250610774565b6000838152600160209081526040808320858452825280832033845290915290205460ff16156102ce57505050565b6103056040518060400160405280601681526020017519dd595cdccb081b9bdd0819dd595cdcd959081e595d60521b815250610774565b600083815260016020818152604080842086855282528084203385529091528220805460ff1916909117905561033a846104c0565b90506103478184846107ba565b1561041b5761037b6040518060400160405280600e81526020016d19dd595cdccb0818dbdc9c9958dd60921b815250610774565b6103b6604051806060016040528060348152602001611aa76034913960008681526002602090815260408083203384529091529020546106d1565b600084815260026020908152604080832033845290915281208054916103db83611789565b919050555061041b604051806060016040528060348152602001611aa76034913960008681526002602090815260408083203384529091529020546106d1565b50505050565b600061044560405180606001604052806025815260200161193560259139836106d1565b6104676040518060600160405280602b8152602001611c4e602b913933611413565b6104a26040518060800160405280604e8152602001611b07604e913960008481526002602090815260408083203384529091529020546106d1565b50600090815260026020908152604080832033845290915290205490565b6104c861157d565b6104d06115aa565b60005b6101008110156104fe5780828261010081106104f1576104f161175d565b60200201526001016104d3565b50600061050e60016101006117a2565b90505b80156105e257600061052d856105288460016117b5565b611458565b9050828161010081106105425761054261175d565b60200201518383610100811061055a5761055a61175d565b6020020151848461010081106105725761057261175d565b60200201858461010081106105895761058961175d565b602002018281525082815250505084826040516020016105b3929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c94505080806105da906117c8565b915050610511565b5060005b60078110156106665760005b600781101561065d5782816106086007856117df565b61061291906117b5565b61010081106106235761062361175d565b602002015184836007811061063a5761063a61175d565b602002015182600781106106505761065061175d565b60200201526001016105f2565b506001016105e6565b5050919050565b6000818152602081905260409020546001600160a01b031661068c5750565b6000818152600260209081526040808320338452909152902054600a11156106b15750565b600090815260208190526040902080546001600160a01b03191633179055565b61071682826040516024016106e792919061183c565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b17905261149a565b5050565b610100821061072857600080fd5b805161073357600080fd5b61073f600760026117df565b81511061074b57600080fd5b602081015161075957600080fd5b610765600760026117df565b60208201511061071657600080fd5b6107b781604051602401610788919061185e565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261149a565b50565b60006107fb6040518060400160405280601a81526020017f69734775657373436f72726563742c2074617267657443617264000000000000815250846106d1565b61081f604051806060016040528060238152602001611c2b602391398360006101dd565b610843604051806060016040528060238152602001611b89602391398360016101dd565b60408051808201909152601881527f69734775657373436f72726563742c20302c3020636172640000000000000000602082015261088b908560005b602002015160006101dd565b610895838361071a565b6108d36040518060400160405280601b81526020017f69734775657373436f72726563742c20616674657220636865636b0000000000815250610774565b60006108de846114a3565b90506109046040518060600160405280602d81526020016119ed602d91398260006101dd565b6109286040518060600160405280602e81526020016118da602e91398260016101dd565b61094c6040518060600160405280602b8152602001611c00602b91398260036101dd565b6109706040518060600160405280602a8152602001611bd6602a91398260026101dd565b6109a560405180606001604052806036815260200161198d6036913961099e8760005b6020020151516114a3565b60006101dd565b6109d3604051806060016040528060378152602001611a45603791396109cc876000610993565b60016101dd565b610a01604051806060016040528060348152602001611b55603491396109fa876000610993565b60036101dd565b610a2f60405180606001604052806033815260200161195a60339139610a28876000610993565b60026101dd565b8251610a3d90600290611887565b6001148015610a5c57506020830151610a5890600290611887565b6001145b15610aef57610a946040518060400160405280601281526020017169734775657373436f72726563742c20633160701b815250610774565b60008560028560016020020151610aab919061189b565b60078110610abb57610abb61175d565b60200201518451610ace9060029061189b565b60078110610ade57610ade61175d565b60200201518514925061140c915050565b8251610afd90600290611887565b158015610b1857506020830151610b1690600290611887565b155b15610d4757610b506040518060400160405280601281526020017134b9a3bab2b9b9a1b7b93932b1ba1610319960711b815250610774565b6000856001600286826020020151610b68919061189b565b610b7291906117a2565b60078110610b8257610b8261175d565b60200201518451600190610b989060029061189b565b610ba291906117a2565b60078110610bb257610bb261175d565b602002015190506000610bc4826114a3565b90506000876001600288826020020151610bde919061189b565b610be891906117a2565b60078110610bf857610bf861175d565b60200201518651610c0b9060029061189b565b60078110610c1b57610c1b61175d565b602002015190506000610c2d826114a3565b905060008960028960016020020151610c46919061189b565b60078110610c5657610c5661175d565b60200201518851600190610c6c9060029061189b565b610c7691906117a2565b60078110610c8657610c8661175d565b602002015190506000610c98826114a3565b905060008b60028b60016020020151610cb1919061189b565b60078110610cc157610cc161175d565b60200201518a51610cd49060029061189b565b60078110610ce457610ce461175d565b602002015190506000610cf6826114a3565b89516060890151919250148015610d14575060208901516040860151145b8015610d27575060408901516020840151145b8015610d37575060608901518151145b995050505050505050505061140c565b8251610d5590600290611887565b6001148015610d7257506020830151610d7090600290611887565b155b156112d057610daa6040518060400160405280601281526020017169734775657373436f72726563742c20633360701b815250610774565b6000856001600286826020020151610dc2919061189b565b610dcc91906117a2565b60078110610ddc57610ddc61175d565b60200201518451610def9060029061189b565b60078110610dff57610dff61175d565b60200201519050610e356040518060600160405280602c8152602001611adb602c91398551610e309060029061189b565b6106d1565b610e6f6040518060600160405280602d8152602001611908602d91396020860151600190610e659060029061189b565b610e3091906117a2565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b305d00000000006020820152610eaf9087600061087f565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b315d5b315d00000000006020820152610ef7908760015b602002015160016101dd565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b345d5b305d00000000006020820152610f379087600461087f565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b345d5b315d00000000006020820152610f7790876004610eeb565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b345d5b325d00000000006020820152610fbf908760045b602002015160026101dd565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b345d5b335d00000000006020820152611007908760045b602002015160036101dd565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b315d0000000000602082015261104790876000610eeb565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b325d0000000000602082015261108790876000610fb3565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b335d000000000060208201526110c790876000610ffb565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b345d000000000060208201528651611109919060046101dd565b6000611114826114a3565b90506000876002876001602002015161112d919061189b565b6007811061113d5761113d61175d565b602002015186516111509060029061189b565b600781106111605761116061175d565b602002015190506000611172826114a3565b90506111b36040518060400160405280601a81526020017f69734775657373436f72726563742c20626f74746f6d43617264000000000000815250856106d1565b6111f26040518060400160405280601781526020017f69734775657373436f72726563742c20746f7043617264000000000000000000815250836106d1565b6112166040518060600160405280602a8152602001611bac602a91398460026101dd565b61123a6040518060600160405280602b8152602001611a1a602b91398460036101dd565b61125e6040518060600160405280602a81526020016119c3602a91398260006101dd565b6112826040518060600160405280602b8152602001611a7c602b91398260016101dd565b8451604084015114801561129d575060208501516060840151145b80156112ad575060408501518151145b80156112c4575060608501518160015b6020020151145b9550505050505061140c565b611303604051806040016040528060128152602001711a5cd1dd595cdcd0dbdc9c9958dd0b0818cd60721b815250610774565b6000856002856001602002015161131a919061189b565b6007811061132a5761132a61175d565b602002015184516001906113409060029061189b565b61134a91906117a2565b6007811061135a5761135a61175d565b60200201519050600061136c826114a3565b905060008760028760016020020151611385919061189b565b600781106113955761139561175d565b602002015186516113a89060029061189b565b600781106113b8576113b861175d565b6020020151905060006113ca826114a3565b855160208501519192501480156113e5575060208501518151145b80156113f8575060408501516060840151145b80156112c4575060608501518160026112bd565b9392505050565b61071682826040516024016114299291906118af565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261149a565b6000818360405160200161146e91815260200190565b6040516020818303038152906040528051906020012060001c6114919190611887565b90505b92915050565b6107b78161155c565b6114ab6115ca565b610100821061150a5760405162461bcd60e51b815260206004820152602160248201527f4e756d626572206d757374206265206265747765656e203020616e64203235356044820152601760f91b606482015260840160405180910390fd5b6115126115ca565b60005b600481101561155557611529600485611887565b82826004811061153b5761153b61175d565b602002015261154b60048561189b565b9350600101611515565b5092915050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6040518060e001604052806007905b6115946115e8565b81526020019060019003908161158c5790505090565b604051806120000160405280610100906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060e001604052806007906020820280368337509192915050565b6000806040838503121561161957600080fd5b8235915060208301356001600160a01b038116811461163757600080fd5b809150509250929050565b60006020828403121561165457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060006080848603121561168657600080fd5b8335925060208401359150605f840185136116a057600080fd5b6040516040810181811067ffffffffffffffff821117156116c3576116c361165b565b6040528060808601878111156116d857600080fd5b604087015b818110156116f55780358352602092830192016116dd565b505050809150509250925092565b6106208101818360005b60078110156117545781518360005b600781101561173b57825182526020928301929091019060010161171c565b50505060e092909201916020919091019060010161170d565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161179b5761179b611773565b5060010190565b8181038181111561149457611494611773565b8082018082111561149457611494611773565b6000816117d7576117d7611773565b506000190190565b808202811582820484141761149457611494611773565b6000815180845260005b8181101561181c57602081850181015186830182015201611800565b506000602082860101526020601f19601f83011685010191505092915050565b60408152600061184f60408301856117f6565b90508260208301529392505050565b60208152600061149160208301846117f6565b634e487b7160e01b600052601260045260246000fd5b60008261189657611896611871565b500690565b6000826118aa576118aa611871565b500490565b6040815260006118c260408301856117f6565b905060018060a01b0383166020830152939250505056fe69734775657373436f72726563742c207461726765744361726456616c7565735b424f54544f4d5f52494748545d69734775657373436f72726563742c206775657373436f6f7264696e617465735b524f575d202f2032202d2031766965774e756d436f7272656374506572426f617264506572506c617965722c207365656469734775657373436f72726563742c206e756d626572546f4361726428626f6172645b305d5b305d295b544f505f4c4546545d69734775657373436f72726563742c206e756d626572546f4361726428626f6172645b305d5b305d295b424f54544f4d5f4c4546545d69734775657373436f72726563742c20746f704361726456616c7565735b424f54544f4d5f4c4546545d69734775657373436f72726563742c207461726765744361726456616c7565735b424f54544f4d5f4c4546545d69734775657373436f72726563742c20626f74746f6d4361726456616c7565735b544f505f52494748545d69734775657373436f72726563742c206e756d626572546f4361726428626f6172645b305d5b305d295b424f54544f4d5f52494748545d69734775657373436f72726563742c20746f704361726456616c7565735b424f54544f4d5f52494748545d67756573732c206e756d436f7272656374506572426f617264506572506c617965725b736565645d5b6d73672e73656e6465725d69734775657373436f72726563742c206775657373436f6f7264696e617465735b434f4c554d4e5d202f2032766965774e756d436f7272656374506572426f617264506572506c617965722c206e756d436f7272656374506572426f617264506572506c617965725b736565645d5b6d73672e73656e6465725d69734775657373436f72726563742c206e756d626572546f4361726428626f6172645b305d5b305d295b544f505f52494748545d69734775657373436f72726563742c206775657373436f6f7264696e617465735b315d69734775657373436f72726563742c20626f74746f6d4361726456616c7565735b544f505f4c4546545d69734775657373436f72726563742c207461726765744361726456616c7565735b544f505f4c4546545d69734775657373436f72726563742c207461726765744361726456616c7565735b544f505f52494748545d69734775657373436f72726563742c206775657373436f6f7264696e617465735b305d766965774e756d436f7272656374506572426f617264506572506c617965722c206d73672e73656e646572a2646970667358221220bced0b37ad8cacd12f15ec28a1a7b5aa043ca1f8a1c3fc8690bfbe0d699220f264736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063187604cc14610067578063713d9e8b146100a5578063a7e7c787146100e6578063b7507764146100fb578063bbffa7f31461010e578063ee0144ab1461012e575b600080fd5b610092610075366004611606565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6100ce6100b3366004611642565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161009c565b6100f96100f4366004611671565b610141565b005b610092610109366004611642565b610421565b61012161011c366004611642565b6104c0565b60405161009c9190611703565b6100f961013c366004611642565b61066d565b61016e6040518060400160405280600b81526020016a19dd595cdccb081cd9595960aa1b815250846106d1565b6101a16040518060400160405280601181526020017019dd595cdccb081d185c99d95d10d85c99607a1b815250836106d1565b60408051808201909152601a81527f67756573732c206775657373436f6f7264696e617465735b305d00000000000060208201526101e7908260005b60200201516106d1565b60408051808201909152601a81527f67756573732c206775657373436f6f7264696e617465735b315d0000000000006020820152610227908260016101dd565b610262604051806060016040528060348152602001611aa76034913960008581526002602090815260408083203384529091529020546106d1565b61026c828261071a565b61029f6040518060400160405280601281526020017167756573732c20616674657220636865636b60701b815250610774565b6000838152600160209081526040808320858452825280832033845290915290205460ff16156102ce57505050565b6103056040518060400160405280601681526020017519dd595cdccb081b9bdd0819dd595cdcd959081e595d60521b815250610774565b600083815260016020818152604080842086855282528084203385529091528220805460ff1916909117905561033a846104c0565b90506103478184846107ba565b1561041b5761037b6040518060400160405280600e81526020016d19dd595cdccb0818dbdc9c9958dd60921b815250610774565b6103b6604051806060016040528060348152602001611aa76034913960008681526002602090815260408083203384529091529020546106d1565b600084815260026020908152604080832033845290915281208054916103db83611789565b919050555061041b604051806060016040528060348152602001611aa76034913960008681526002602090815260408083203384529091529020546106d1565b50505050565b600061044560405180606001604052806025815260200161193560259139836106d1565b6104676040518060600160405280602b8152602001611c4e602b913933611413565b6104a26040518060800160405280604e8152602001611b07604e913960008481526002602090815260408083203384529091529020546106d1565b50600090815260026020908152604080832033845290915290205490565b6104c861157d565b6104d06115aa565b60005b6101008110156104fe5780828261010081106104f1576104f161175d565b60200201526001016104d3565b50600061050e60016101006117a2565b90505b80156105e257600061052d856105288460016117b5565b611458565b9050828161010081106105425761054261175d565b60200201518383610100811061055a5761055a61175d565b6020020151848461010081106105725761057261175d565b60200201858461010081106105895761058961175d565b602002018281525082815250505084826040516020016105b3929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c94505080806105da906117c8565b915050610511565b5060005b60078110156106665760005b600781101561065d5782816106086007856117df565b61061291906117b5565b61010081106106235761062361175d565b602002015184836007811061063a5761063a61175d565b602002015182600781106106505761065061175d565b60200201526001016105f2565b506001016105e6565b5050919050565b6000818152602081905260409020546001600160a01b031661068c5750565b6000818152600260209081526040808320338452909152902054600a11156106b15750565b600090815260208190526040902080546001600160a01b03191633179055565b61071682826040516024016106e792919061183c565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b17905261149a565b5050565b610100821061072857600080fd5b805161073357600080fd5b61073f600760026117df565b81511061074b57600080fd5b602081015161075957600080fd5b610765600760026117df565b60208201511061071657600080fd5b6107b781604051602401610788919061185e565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261149a565b50565b60006107fb6040518060400160405280601a81526020017f69734775657373436f72726563742c2074617267657443617264000000000000815250846106d1565b61081f604051806060016040528060238152602001611c2b602391398360006101dd565b610843604051806060016040528060238152602001611b89602391398360016101dd565b60408051808201909152601881527f69734775657373436f72726563742c20302c3020636172640000000000000000602082015261088b908560005b602002015160006101dd565b610895838361071a565b6108d36040518060400160405280601b81526020017f69734775657373436f72726563742c20616674657220636865636b0000000000815250610774565b60006108de846114a3565b90506109046040518060600160405280602d81526020016119ed602d91398260006101dd565b6109286040518060600160405280602e81526020016118da602e91398260016101dd565b61094c6040518060600160405280602b8152602001611c00602b91398260036101dd565b6109706040518060600160405280602a8152602001611bd6602a91398260026101dd565b6109a560405180606001604052806036815260200161198d6036913961099e8760005b6020020151516114a3565b60006101dd565b6109d3604051806060016040528060378152602001611a45603791396109cc876000610993565b60016101dd565b610a01604051806060016040528060348152602001611b55603491396109fa876000610993565b60036101dd565b610a2f60405180606001604052806033815260200161195a60339139610a28876000610993565b60026101dd565b8251610a3d90600290611887565b6001148015610a5c57506020830151610a5890600290611887565b6001145b15610aef57610a946040518060400160405280601281526020017169734775657373436f72726563742c20633160701b815250610774565b60008560028560016020020151610aab919061189b565b60078110610abb57610abb61175d565b60200201518451610ace9060029061189b565b60078110610ade57610ade61175d565b60200201518514925061140c915050565b8251610afd90600290611887565b158015610b1857506020830151610b1690600290611887565b155b15610d4757610b506040518060400160405280601281526020017134b9a3bab2b9b9a1b7b93932b1ba1610319960711b815250610774565b6000856001600286826020020151610b68919061189b565b610b7291906117a2565b60078110610b8257610b8261175d565b60200201518451600190610b989060029061189b565b610ba291906117a2565b60078110610bb257610bb261175d565b602002015190506000610bc4826114a3565b90506000876001600288826020020151610bde919061189b565b610be891906117a2565b60078110610bf857610bf861175d565b60200201518651610c0b9060029061189b565b60078110610c1b57610c1b61175d565b602002015190506000610c2d826114a3565b905060008960028960016020020151610c46919061189b565b60078110610c5657610c5661175d565b60200201518851600190610c6c9060029061189b565b610c7691906117a2565b60078110610c8657610c8661175d565b602002015190506000610c98826114a3565b905060008b60028b60016020020151610cb1919061189b565b60078110610cc157610cc161175d565b60200201518a51610cd49060029061189b565b60078110610ce457610ce461175d565b602002015190506000610cf6826114a3565b89516060890151919250148015610d14575060208901516040860151145b8015610d27575060408901516020840151145b8015610d37575060608901518151145b995050505050505050505061140c565b8251610d5590600290611887565b6001148015610d7257506020830151610d7090600290611887565b155b156112d057610daa6040518060400160405280601281526020017169734775657373436f72726563742c20633360701b815250610774565b6000856001600286826020020151610dc2919061189b565b610dcc91906117a2565b60078110610ddc57610ddc61175d565b60200201518451610def9060029061189b565b60078110610dff57610dff61175d565b60200201519050610e356040518060600160405280602c8152602001611adb602c91398551610e309060029061189b565b6106d1565b610e6f6040518060600160405280602d8152602001611908602d91396020860151600190610e659060029061189b565b610e3091906117a2565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b305d00000000006020820152610eaf9087600061087f565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b315d5b315d00000000006020820152610ef7908760015b602002015160016101dd565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b345d5b305d00000000006020820152610f379087600461087f565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b345d5b315d00000000006020820152610f7790876004610eeb565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b345d5b325d00000000006020820152610fbf908760045b602002015160026101dd565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b345d5b335d00000000006020820152611007908760045b602002015160036101dd565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b315d0000000000602082015261104790876000610eeb565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b325d0000000000602082015261108790876000610fb3565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b335d000000000060208201526110c790876000610ffb565b60408051808201909152601b81527f69734775657373436f72726563742c20626f6172645b305d5b345d000000000060208201528651611109919060046101dd565b6000611114826114a3565b90506000876002876001602002015161112d919061189b565b6007811061113d5761113d61175d565b602002015186516111509060029061189b565b600781106111605761116061175d565b602002015190506000611172826114a3565b90506111b36040518060400160405280601a81526020017f69734775657373436f72726563742c20626f74746f6d43617264000000000000815250856106d1565b6111f26040518060400160405280601781526020017f69734775657373436f72726563742c20746f7043617264000000000000000000815250836106d1565b6112166040518060600160405280602a8152602001611bac602a91398460026101dd565b61123a6040518060600160405280602b8152602001611a1a602b91398460036101dd565b61125e6040518060600160405280602a81526020016119c3602a91398260006101dd565b6112826040518060600160405280602b8152602001611a7c602b91398260016101dd565b8451604084015114801561129d575060208501516060840151145b80156112ad575060408501518151145b80156112c4575060608501518160015b6020020151145b9550505050505061140c565b611303604051806040016040528060128152602001711a5cd1dd595cdcd0dbdc9c9958dd0b0818cd60721b815250610774565b6000856002856001602002015161131a919061189b565b6007811061132a5761132a61175d565b602002015184516001906113409060029061189b565b61134a91906117a2565b6007811061135a5761135a61175d565b60200201519050600061136c826114a3565b905060008760028760016020020151611385919061189b565b600781106113955761139561175d565b602002015186516113a89060029061189b565b600781106113b8576113b861175d565b6020020151905060006113ca826114a3565b855160208501519192501480156113e5575060208501518151145b80156113f8575060408501516060840151145b80156112c4575060608501518160026112bd565b9392505050565b61071682826040516024016114299291906118af565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261149a565b6000818360405160200161146e91815260200190565b6040516020818303038152906040528051906020012060001c6114919190611887565b90505b92915050565b6107b78161155c565b6114ab6115ca565b610100821061150a5760405162461bcd60e51b815260206004820152602160248201527f4e756d626572206d757374206265206265747765656e203020616e64203235356044820152601760f91b606482015260840160405180910390fd5b6115126115ca565b60005b600481101561155557611529600485611887565b82826004811061153b5761153b61175d565b602002015261154b60048561189b565b9350600101611515565b5092915050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6040518060e001604052806007905b6115946115e8565b81526020019060019003908161158c5790505090565b604051806120000160405280610100906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060e001604052806007906020820280368337509192915050565b6000806040838503121561161957600080fd5b8235915060208301356001600160a01b038116811461163757600080fd5b809150509250929050565b60006020828403121561165457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060006080848603121561168657600080fd5b8335925060208401359150605f840185136116a057600080fd5b6040516040810181811067ffffffffffffffff821117156116c3576116c361165b565b6040528060808601878111156116d857600080fd5b604087015b818110156116f55780358352602092830192016116dd565b505050809150509250925092565b6106208101818360005b60078110156117545781518360005b600781101561173b57825182526020928301929091019060010161171c565b50505060e092909201916020919091019060010161170d565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161179b5761179b611773565b5060010190565b8181038181111561149457611494611773565b8082018082111561149457611494611773565b6000816117d7576117d7611773565b506000190190565b808202811582820484141761149457611494611773565b6000815180845260005b8181101561181c57602081850181015186830182015201611800565b506000602082860101526020601f19601f83011685010191505092915050565b60408152600061184f60408301856117f6565b90508260208301529392505050565b60208152600061149160208301846117f6565b634e487b7160e01b600052601260045260246000fd5b60008261189657611896611871565b500690565b6000826118aa576118aa611871565b500490565b6040815260006118c260408301856117f6565b905060018060a01b0383166020830152939250505056fe69734775657373436f72726563742c207461726765744361726456616c7565735b424f54544f4d5f52494748545d69734775657373436f72726563742c206775657373436f6f7264696e617465735b524f575d202f2032202d2031766965774e756d436f7272656374506572426f617264506572506c617965722c207365656469734775657373436f72726563742c206e756d626572546f4361726428626f6172645b305d5b305d295b544f505f4c4546545d69734775657373436f72726563742c206e756d626572546f4361726428626f6172645b305d5b305d295b424f54544f4d5f4c4546545d69734775657373436f72726563742c20746f704361726456616c7565735b424f54544f4d5f4c4546545d69734775657373436f72726563742c207461726765744361726456616c7565735b424f54544f4d5f4c4546545d69734775657373436f72726563742c20626f74746f6d4361726456616c7565735b544f505f52494748545d69734775657373436f72726563742c206e756d626572546f4361726428626f6172645b305d5b305d295b424f54544f4d5f52494748545d69734775657373436f72726563742c20746f704361726456616c7565735b424f54544f4d5f52494748545d67756573732c206e756d436f7272656374506572426f617264506572506c617965725b736565645d5b6d73672e73656e6465725d69734775657373436f72726563742c206775657373436f6f7264696e617465735b434f4c554d4e5d202f2032766965774e756d436f7272656374506572426f617264506572506c617965722c206e756d436f7272656374506572426f617264506572506c617965725b736565645d5b6d73672e73656e6465725d69734775657373436f72726563742c206e756d626572546f4361726428626f6172645b305d5b305d295b544f505f52494748545d69734775657373436f72726563742c206775657373436f6f7264696e617465735b315d69734775657373436f72726563742c20626f74746f6d4361726456616c7565735b544f505f4c4546545d69734775657373436f72726563742c207461726765744361726456616c7565735b544f505f4c4546545d69734775657373436f72726563742c207461726765744361726456616c7565735b544f505f52494748545d69734775657373436f72726563742c206775657373436f6f7264696e617465735b305d766965774e756d436f7272656374506572426f617264506572506c617965722c206d73672e73656e646572a2646970667358221220bced0b37ad8cacd12f15ec28a1a7b5aa043ca1f8a1c3fc8690bfbe0d699220f264736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41,
        "contract": "contracts/QuestionMarkGame.sol:QuestionMarkGame",
        "label": "winnerPerBoard",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 49,
        "contract": "contracts/QuestionMarkGame.sol:QuestionMarkGame",
        "label": "guessedPerBoardPerTargetCardPerPlayer",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 55,
        "contract": "contracts/QuestionMarkGame.sol:QuestionMarkGame",
        "label": "numCorrectPerBoardPerPlayer",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}